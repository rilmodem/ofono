#!/usr/bin/python
#
#
# This test ensures that basic modem information is available
# when the modem is online and has a valid, unlocked SIM present.

import dbus
import time

bus = dbus.SystemBus()

manager = dbus.Interface(bus.get_object('org.ofono', '/'),
						'org.ofono.Manager')
modems = manager.GetModems()
path = modems[0][0]

print "[ %s ]" % (path)

print "Setting modem %s online..." % path
modem = dbus.Interface(bus.get_object('org.ofono', path), 'org.ofono.Modem')
modem.SetProperty("Online", dbus.Boolean(1), timeout = 120)

time.sleep(5)

properties = modem.GetProperties()
keys = properties.keys()

assert keys.index("Features") != 'ValueError'
assert keys.index("Emergency") != 'ValueError'
assert keys.index("Powered") != 'ValueError'
assert keys.index("Lockdown") != 'ValueError'
assert keys.index("Interfaces") != 'ValueError'
assert keys.index('Online') != 'ValueError'
assert keys.index('Model') != 'ValueError'

# TODO: not properly set by emulator
# assert keys.index("Revision") != 'ValueError'

assert keys.index('Type') != 'ValueError'

# TODO: not properly set by emulator
#assert keys.index('Serial') != 'ValueError'

assert keys.index('Manufacturer') != 'ValueError'

# validate Features = net sms gprs sim

assert properties['Emergency'] == 0
assert properties['Powered'] == 1
assert properties["Lockdown"] == 0

# TODO: validate Interfaces: NetworkReg, CallVolume, MessageManager,
#       ConnectionManager, NetworkTime, SimManager, VoiceCallManager

assert properties['Online'] == 1
assert properties['Model'] == "Fake Modem Model"
assert properties['Type'] == "hardware"

# TODO: not properly set by emulator
#assert properties['Serial'] == "000000000000000"

assert properties['Manufacturer'] == "Fake Manufacturer"

# TODO: not properly set by emulator
#assert properties["Revision"].isalnum() 

# valid SimManager properties
simmanager = dbus.Interface(bus.get_object('org.ofono', path),
                            'org.ofono.SimManager')

properties = simmanager.GetProperties()
keys = properties.keys()

assert keys.index('Retries') != 'ValueError'
assert keys.index('FixedDialing') != 'ValueError'
assert keys.index('MobileCountryCode') != 'ValueError'
assert keys.index('SubscriberNumbers') != 'ValueError'
assert keys.index('BarredDialing') != 'ValueError'
assert keys.index('CardIdentifier') != 'ValueError'
assert keys.index('LockedPins') != 'ValueError'
assert keys.index('MobileNetworkCode') != 'ValueError'
assert keys.index('SubscriberIdentity') != 'ValueError'
assert keys.index('Present') != 'ValueError'
assert keys.index('PinRequired') != 'ValueError'

# TODO: Retries isn't currently populated ( lp: )
# assert properties['Retries'] == 
assert properties['FixedDialing'] == 0
assert properties['MobileCountryCode'] == '310'
assert properties['SubscriberNumbers'][0] == '15555215554'
assert properties['BarredDialing'] == 0
assert properties['CardIdentifier'] == '89014103211118510720'
print '%s' % properties['LockedPins']
assert len(properties['LockedPins']) == 0
assert properties['MobileNetworkCode'] == '260'
assert properties['SubscriberIdentity'] == '310260000000000'
assert properties['Present'] == 1
assert properties['PinRequired'] == "none"

# valid NetworkRegistration properties
netreg = dbus.Interface(bus.get_object('org.ofono', path),
                            'org.ofono.NetworkRegistration')

properties = netreg.GetProperties()
keys = properties.keys()

assert keys.index('Status') != 'ValueError'

# TODO: no Strength reported by emulator!
# assert keys.index('Strength') != 'ValueError'

assert keys.index('Name') != 'ValueError'
assert keys.index('LocationAreaCode') != 'ValueError'
assert keys.index('Mode') != 'ValueError'
assert keys.index('MobileCountryCode') != 'ValueError'

# TODO: no Technology reported by emulator
# assert keys.index('Technology') != 'ValueError'

assert keys.index('CellId') != 'ValueError'
assert keys.index('MobileNetworkCode') != 'ValueError'

assert properties['Status'] == 'registered'
assert properties['Name'] == 'Android (Android)'
assert properties['LocationAreaCode'] == 65535

# TODO: emulator reports 'Mode' as 'auto' ! 'auto-only'
# assert properties['Mode'] == 'auto-only'

assert properties['MobileCountryCode'] == '310'

# TODO: no Technology reported by emulator
# assert properties['Technology'] == 'umts'

assert properties['MobileNetworkCode'] == '260'

# valid VoiceCallManager properties
voice = dbus.Interface(bus.get_object('org.ofono', path),
                            'org.ofono.VoiceCallManager')

properties = voice.GetProperties()
keys = properties.keys()

assert keys.index('EmergencyNumbers') != 'ValueError'

numbers = properties['EmergencyNumbers']



print "%s" % numbers

for number in numbers:
    assert number in ['08', '000', '999', '110', '112', '911', '118', '119']

print "OK\n"
